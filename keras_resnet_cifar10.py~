from keras.datasets import cifar10
from keras.models import Model
from keras.utils import np_utils
from keras.optimizers import SGD
from keras.layers import Input, Conv2D, Dense
from keras.layers import GlobalAveragePooling2D
from keras.layers import BatchNormalization
from keras.preprocessing.image import ImageDataGenerator

def build_plain_architecture():
  '''
    Architecture of ResNET (He et al. 2015) with n=1.
    Ioffe et al. 2015 use L2 regularization, but not
    using it here, see their Section 4.2.1.
  '''

  inputs = Input(shape=(3,32,32))
  
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(inputs)
  x = BatchNormalization()(x)
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(16, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(32, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = BatchNormalization()(x)
  x = Conv2D(64, kernel_size=(3,3), strides=(2,2), activation='relu', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)
  x = GlobalAveragePooling2D()(x)
  x = BatchNormalization()(x)
  predictions = Dense(10, activation='softmax', \
    kernel_initializer='he_normal', bias_initializer='zeros')(x)

  model = Model(inputs=inputs, outputs=predictions)
  model.compile(optimizer=SGD(lr=0.1, decay=0.0001, momentum=0.9), \
    loss='categorical_crossentropy')

  model.summary()

  return model

def build_residual_architecture():
  pass

def train_plain_architecture(x, y, datagen):

  model = build_plain_architecture()

  model.fit_generator(datagen.flow(x, y, batch_size=128), epochs=1)

  return model

def train_residual_architecture(datagen):
  pass


def main():
  # constants
  num_classes = 10
  
  # load data set
  (x_train, y_train), (x_test, y_test) = cifar10.load_data()
  y_train = np_utils.to_categorical(y_train, num_classes)
  y_test = np_utils.to_categorical(y_test, num_classes)

  # subtract featurewuse mean as in He et al.2015
  train_datagen = ImageDataGenerator(featurewise_center=True, \
                                     horizontal_flip=True, \
                                     width_shift_range=4, \
                                     height_shift_range=4)

  train_datagen.fit(x_train)

  print(x_train.shape)

  train_plain_architecture(x_train, y_train, train_datagen)

if __name__ == '__main__':
  main()
